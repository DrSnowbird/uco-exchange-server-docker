# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OrganizationType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, organization_uuid: str='abcdabcd-1234-1234-1234-abcdefabcdef', organization_id: str='organizationID-unknown', organization_name: str='organizationName-unknown', organization_web: str='organizationWeb-unknown'):  # noqa: E501
        """OrganizationType - a model defined in Swagger

        :param organization_uuid: The organization_uuid of this OrganizationType.  # noqa: E501
        :type organization_uuid: str
        :param organization_id: The organization_id of this OrganizationType.  # noqa: E501
        :type organization_id: str
        :param organization_name: The organization_name of this OrganizationType.  # noqa: E501
        :type organization_name: str
        :param organization_web: The organization_web of this OrganizationType.  # noqa: E501
        :type organization_web: str
        """
        self.swagger_types = {
            'organization_uuid': str,
            'organization_id': str,
            'organization_name': str,
            'organization_web': str
        }

        self.attribute_map = {
            'organization_uuid': 'organizationUUID',
            'organization_id': 'organizationID',
            'organization_name': 'organizationName',
            'organization_web': 'organizationWeb'
        }
        self._organization_uuid = organization_uuid
        self._organization_id = organization_id
        self._organization_name = organization_name
        self._organization_web = organization_web

    @classmethod
    def from_dict(cls, dikt) -> 'OrganizationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrganizationType of this OrganizationType.  # noqa: E501
        :rtype: OrganizationType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization_uuid(self) -> str:
        """Gets the organization_uuid of this OrganizationType.

        the UUID (v4.0) of an organization to be generated by the RDF Graph Exchange Server.  # noqa: E501

        :return: The organization_uuid of this OrganizationType.
        :rtype: str
        """
        return self._organization_uuid

    @organization_uuid.setter
    def organization_uuid(self, organization_uuid: str):
        """Sets the organization_uuid of this OrganizationType.

        the UUID (v4.0) of an organization to be generated by the RDF Graph Exchange Server.  # noqa: E501

        :param organization_uuid: The organization_uuid of this OrganizationType.
        :type organization_uuid: str
        """

        self._organization_uuid = organization_uuid

    @property
    def organization_id(self) -> str:
        """Gets the organization_id of this OrganizationType.

        a non-UUID ()short) organization UID  # noqa: E501

        :return: The organization_id of this OrganizationType.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: str):
        """Sets the organization_id of this OrganizationType.

        a non-UUID ()short) organization UID  # noqa: E501

        :param organization_id: The organization_id of this OrganizationType.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def organization_name(self) -> str:
        """Gets the organization_name of this OrganizationType.


        :return: The organization_name of this OrganizationType.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name: str):
        """Sets the organization_name of this OrganizationType.


        :param organization_name: The organization_name of this OrganizationType.
        :type organization_name: str
        """

        self._organization_name = organization_name

    @property
    def organization_web(self) -> str:
        """Gets the organization_web of this OrganizationType.


        :return: The organization_web of this OrganizationType.
        :rtype: str
        """
        return self._organization_web

    @organization_web.setter
    def organization_web(self, organization_web: str):
        """Sets the organization_web of this OrganizationType.


        :param organization_web: The organization_web of this OrganizationType.
        :type organization_web: str
        """

        self._organization_web = organization_web
