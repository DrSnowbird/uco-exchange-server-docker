# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GroupType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, group_id: str='groupID-unknown', group_name: str='groupName-unknown', remark: str=None):  # noqa: E501
        """GroupType - a model defined in Swagger

        :param group_id: The group_id of this GroupType.  # noqa: E501
        :type group_id: str
        :param group_name: The group_name of this GroupType.  # noqa: E501
        :type group_name: str
        :param remark: The remark of this GroupType.  # noqa: E501
        :type remark: str
        """
        self.swagger_types = {
            'group_id': str,
            'group_name': str,
            'remark': str
        }

        self.attribute_map = {
            'group_id': 'groupID',
            'group_name': 'groupName',
            'remark': 'remark'
        }
        self._group_id = group_id
        self._group_name = group_name
        self._remark = remark

    @classmethod
    def from_dict(cls, dikt) -> 'GroupType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GroupType of this GroupType.  # noqa: E501
        :rtype: GroupType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self) -> str:
        """Gets the group_id of this GroupType.


        :return: The group_id of this GroupType.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: str):
        """Sets the group_id of this GroupType.


        :param group_id: The group_id of this GroupType.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def group_name(self) -> str:
        """Gets the group_name of this GroupType.


        :return: The group_name of this GroupType.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this GroupType.


        :param group_name: The group_name of this GroupType.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def remark(self) -> str:
        """Gets the remark of this GroupType.


        :return: The remark of this GroupType.
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark: str):
        """Sets the remark of this GroupType.


        :param remark: The remark of this GroupType.
        :type remark: str
        """

        self._remark = remark
