# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.graph_access_control_list_type import GraphAccessControlListType  # noqa: F401,E501
from swagger_server.models.organization_type import OrganizationType  # noqa: F401,E501
from swagger_server import util


class UserType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_uuid: str='abcdabcd-0000-1234-1234-abcdefabcdef', user_id: str='uco-user-0123456', user_first_name: str=None, user_last_name: str=None, email: str=None, affiliated_organization: OrganizationType=None, date_start: datetime=None, date_end: datetime=None, graph_access_control_list: GraphAccessControlListType=None):  # noqa: E501
        """UserType - a model defined in Swagger

        :param user_uuid: The user_uuid of this UserType.  # noqa: E501
        :type user_uuid: str
        :param user_id: The user_id of this UserType.  # noqa: E501
        :type user_id: str
        :param user_first_name: The user_first_name of this UserType.  # noqa: E501
        :type user_first_name: str
        :param user_last_name: The user_last_name of this UserType.  # noqa: E501
        :type user_last_name: str
        :param email: The email of this UserType.  # noqa: E501
        :type email: str
        :param affiliated_organization: The affiliated_organization of this UserType.  # noqa: E501
        :type affiliated_organization: OrganizationType
        :param date_start: The date_start of this UserType.  # noqa: E501
        :type date_start: datetime
        :param date_end: The date_end of this UserType.  # noqa: E501
        :type date_end: datetime
        :param graph_access_control_list: The graph_access_control_list of this UserType.  # noqa: E501
        :type graph_access_control_list: GraphAccessControlListType
        """
        self.swagger_types = {
            'user_uuid': str,
            'user_id': str,
            'user_first_name': str,
            'user_last_name': str,
            'email': str,
            'affiliated_organization': OrganizationType,
            'date_start': datetime,
            'date_end': datetime,
            'graph_access_control_list': GraphAccessControlListType
        }

        self.attribute_map = {
            'user_uuid': 'userUUID',
            'user_id': 'userID',
            'user_first_name': 'userFirstName',
            'user_last_name': 'userLastName',
            'email': 'email',
            'affiliated_organization': 'affiliatedOrganization',
            'date_start': 'dateStart',
            'date_end': 'dateEnd',
            'graph_access_control_list': 'graphAccessControlList'
        }
        self._user_uuid = user_uuid
        self._user_id = user_id
        self._user_first_name = user_first_name
        self._user_last_name = user_last_name
        self._email = email
        self._affiliated_organization = affiliated_organization
        self._date_start = date_start
        self._date_end = date_end
        self._graph_access_control_list = graph_access_control_list

    @classmethod
    def from_dict(cls, dikt) -> 'UserType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserType of this UserType.  # noqa: E501
        :rtype: UserType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_uuid(self) -> str:
        """Gets the user_uuid of this UserType.

        the UUID (v4.0) of an organization to be generated by the RDF Graph Exchange Server.  # noqa: E501

        :return: The user_uuid of this UserType.
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid: str):
        """Sets the user_uuid of this UserType.

        the UUID (v4.0) of an organization to be generated by the RDF Graph Exchange Server.  # noqa: E501

        :param user_uuid: The user_uuid of this UserType.
        :type user_uuid: str
        """

        self._user_uuid = user_uuid

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UserType.

        a non-UUID ()short) organization UID and it could be the same as user's email.  # noqa: E501

        :return: The user_id of this UserType.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UserType.

        a non-UUID ()short) organization UID and it could be the same as user's email.  # noqa: E501

        :param user_id: The user_id of this UserType.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_first_name(self) -> str:
        """Gets the user_first_name of this UserType.


        :return: The user_first_name of this UserType.
        :rtype: str
        """
        return self._user_first_name

    @user_first_name.setter
    def user_first_name(self, user_first_name: str):
        """Sets the user_first_name of this UserType.


        :param user_first_name: The user_first_name of this UserType.
        :type user_first_name: str
        """

        self._user_first_name = user_first_name

    @property
    def user_last_name(self) -> str:
        """Gets the user_last_name of this UserType.


        :return: The user_last_name of this UserType.
        :rtype: str
        """
        return self._user_last_name

    @user_last_name.setter
    def user_last_name(self, user_last_name: str):
        """Sets the user_last_name of this UserType.


        :param user_last_name: The user_last_name of this UserType.
        :type user_last_name: str
        """

        self._user_last_name = user_last_name

    @property
    def email(self) -> str:
        """Gets the email of this UserType.


        :return: The email of this UserType.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UserType.


        :param email: The email of this UserType.
        :type email: str
        """

        self._email = email

    @property
    def affiliated_organization(self) -> OrganizationType:
        """Gets the affiliated_organization of this UserType.


        :return: The affiliated_organization of this UserType.
        :rtype: OrganizationType
        """
        return self._affiliated_organization

    @affiliated_organization.setter
    def affiliated_organization(self, affiliated_organization: OrganizationType):
        """Sets the affiliated_organization of this UserType.


        :param affiliated_organization: The affiliated_organization of this UserType.
        :type affiliated_organization: OrganizationType
        """

        self._affiliated_organization = affiliated_organization

    @property
    def date_start(self) -> datetime:
        """Gets the date_start of this UserType.

        starting date-time the user allowed to access the RDF Graph Exchange Server  # noqa: E501

        :return: The date_start of this UserType.
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start: datetime):
        """Sets the date_start of this UserType.

        starting date-time the user allowed to access the RDF Graph Exchange Server  # noqa: E501

        :param date_start: The date_start of this UserType.
        :type date_start: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self) -> datetime:
        """Gets the date_end of this UserType.

        expiration date-time the user allowed to access the RDF Graph Exchange Server  # noqa: E501

        :return: The date_end of this UserType.
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end: datetime):
        """Sets the date_end of this UserType.

        expiration date-time the user allowed to access the RDF Graph Exchange Server  # noqa: E501

        :param date_end: The date_end of this UserType.
        :type date_end: datetime
        """

        self._date_end = date_end

    @property
    def graph_access_control_list(self) -> GraphAccessControlListType:
        """Gets the graph_access_control_list of this UserType.


        :return: The graph_access_control_list of this UserType.
        :rtype: GraphAccessControlListType
        """
        return self._graph_access_control_list

    @graph_access_control_list.setter
    def graph_access_control_list(self, graph_access_control_list: GraphAccessControlListType):
        """Sets the graph_access_control_list of this UserType.


        :param graph_access_control_list: The graph_access_control_list of this UserType.
        :type graph_access_control_list: GraphAccessControlListType
        """

        self._graph_access_control_list = graph_access_control_list
