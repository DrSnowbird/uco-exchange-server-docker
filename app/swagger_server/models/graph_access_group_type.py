# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.access_permission_type import AccessPermissionType  # noqa: F401,E501
from swagger_server.models.group_type import GroupType  # noqa: F401,E501
from swagger_server import util


class GraphAccessGroupType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, graph_uri: str='<http://uco.example.org/bookstore>', access_group: GroupType=None, access_permission: AccessPermissionType=None):  # noqa: E501
        """GraphAccessGroupType - a model defined in Swagger

        :param graph_uri: The graph_uri of this GraphAccessGroupType.  # noqa: E501
        :type graph_uri: str
        :param access_group: The access_group of this GraphAccessGroupType.  # noqa: E501
        :type access_group: GroupType
        :param access_permission: The access_permission of this GraphAccessGroupType.  # noqa: E501
        :type access_permission: AccessPermissionType
        """
        self.swagger_types = {
            'graph_uri': str,
            'access_group': GroupType,
            'access_permission': AccessPermissionType
        }

        self.attribute_map = {
            'graph_uri': 'graphURI',
            'access_group': 'accessGroup',
            'access_permission': 'accessPermission'
        }
        self._graph_uri = graph_uri
        self._access_group = access_group
        self._access_permission = access_permission

    @classmethod
    def from_dict(cls, dikt) -> 'GraphAccessGroupType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GraphAccessGroupType of this GraphAccessGroupType.  # noqa: E501
        :rtype: GraphAccessGroupType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_uri(self) -> str:
        """Gets the graph_uri of this GraphAccessGroupType.

        the URI of the RDF Graph data sources  # noqa: E501

        :return: The graph_uri of this GraphAccessGroupType.
        :rtype: str
        """
        return self._graph_uri

    @graph_uri.setter
    def graph_uri(self, graph_uri: str):
        """Sets the graph_uri of this GraphAccessGroupType.

        the URI of the RDF Graph data sources  # noqa: E501

        :param graph_uri: The graph_uri of this GraphAccessGroupType.
        :type graph_uri: str
        """
        if graph_uri is None:
            raise ValueError("Invalid value for `graph_uri`, must not be `None`")  # noqa: E501

        self._graph_uri = graph_uri

    @property
    def access_group(self) -> GroupType:
        """Gets the access_group of this GraphAccessGroupType.


        :return: The access_group of this GraphAccessGroupType.
        :rtype: GroupType
        """
        return self._access_group

    @access_group.setter
    def access_group(self, access_group: GroupType):
        """Sets the access_group of this GraphAccessGroupType.


        :param access_group: The access_group of this GraphAccessGroupType.
        :type access_group: GroupType
        """
        if access_group is None:
            raise ValueError("Invalid value for `access_group`, must not be `None`")  # noqa: E501

        self._access_group = access_group

    @property
    def access_permission(self) -> AccessPermissionType:
        """Gets the access_permission of this GraphAccessGroupType.


        :return: The access_permission of this GraphAccessGroupType.
        :rtype: AccessPermissionType
        """
        return self._access_permission

    @access_permission.setter
    def access_permission(self, access_permission: AccessPermissionType):
        """Sets the access_permission of this GraphAccessGroupType.


        :param access_permission: The access_permission of this GraphAccessGroupType.
        :type access_permission: AccessPermissionType
        """
        if access_permission is None:
            raise ValueError("Invalid value for `access_permission`, must not be `None`")  # noqa: E501

        self._access_permission = access_permission
