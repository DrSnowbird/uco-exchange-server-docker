# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.rdf_data_format_type import RDFDataFormatType  # noqa: F401,E501
from swagger_server import util


class UploadObjectType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str='unknown', organization: str='unknown', reference: str='', graph_uri: str='<http://uco.example.org/bookstore>', rdf_format: List[RDFDataFormatType]=None):  # noqa: E501
        """UploadObjectType - a model defined in Swagger

        :param id: The id of this UploadObjectType.  # noqa: E501
        :type id: str
        :param organization: The organization of this UploadObjectType.  # noqa: E501
        :type organization: str
        :param reference: The reference of this UploadObjectType.  # noqa: E501
        :type reference: str
        :param graph_uri: The graph_uri of this UploadObjectType.  # noqa: E501
        :type graph_uri: str
        :param rdf_format: The rdf_format of this UploadObjectType.  # noqa: E501
        :type rdf_format: List[RDFDataFormatType]
        """
        self.swagger_types = {
            'id': str,
            'organization': str,
            'reference': str,
            'graph_uri': str,
            'rdf_format': List[RDFDataFormatType]
        }

        self.attribute_map = {
            'id': 'id',
            'organization': 'organization',
            'reference': 'reference',
            'graph_uri': 'graphURI',
            'rdf_format': 'rdfFormat'
        }
        self._id = id
        self._organization = organization
        self._reference = reference
        self._graph_uri = graph_uri
        self._rdf_format = rdf_format

    @classmethod
    def from_dict(cls, dikt) -> 'UploadObjectType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UploadObjectType of this UploadObjectType.  # noqa: E501
        :rtype: UploadObjectType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this UploadObjectType.

        the ID of the organization of the client application  # noqa: E501

        :return: The id of this UploadObjectType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UploadObjectType.

        the ID of the organization of the client application  # noqa: E501

        :param id: The id of this UploadObjectType.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organization(self) -> str:
        """Gets the organization of this UploadObjectType.

        the organization of the client application  # noqa: E501

        :return: The organization of this UploadObjectType.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: str):
        """Sets the organization of this UploadObjectType.

        the organization of the client application  # noqa: E501

        :param organization: The organization of this UploadObjectType.
        :type organization: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def reference(self) -> str:
        """Gets the reference of this UploadObjectType.

        the client applications' reference to this batch of RDF data to be uploaded and it is not used by the Server.  # noqa: E501

        :return: The reference of this UploadObjectType.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference: str):
        """Sets the reference of this UploadObjectType.

        the client applications' reference to this batch of RDF data to be uploaded and it is not used by the Server.  # noqa: E501

        :param reference: The reference of this UploadObjectType.
        :type reference: str
        """

        self._reference = reference

    @property
    def graph_uri(self) -> str:
        """Gets the graph_uri of this UploadObjectType.

        the URI of the RDF Graph data sources  # noqa: E501

        :return: The graph_uri of this UploadObjectType.
        :rtype: str
        """
        return self._graph_uri

    @graph_uri.setter
    def graph_uri(self, graph_uri: str):
        """Sets the graph_uri of this UploadObjectType.

        the URI of the RDF Graph data sources  # noqa: E501

        :param graph_uri: The graph_uri of this UploadObjectType.
        :type graph_uri: str
        """
        if graph_uri is None:
            raise ValueError("Invalid value for `graph_uri`, must not be `None`")  # noqa: E501

        self._graph_uri = graph_uri

    @property
    def rdf_format(self) -> List[RDFDataFormatType]:
        """Gets the rdf_format of this UploadObjectType.

        the client applications' type of this batch of RDF data to be uploaded and validated for compliance, e.g., Turtle, RDF/XML, N-Triples, JSON-LD, RDF/JSON, TriG, N-Quads, TriX. Note that parsing JSON-LD mostly is much more time-consuming and expensive in computing than other formats. This API supports other data formats, e.g., N3, RDF/XML, and TURTLE  # noqa: E501

        :return: The rdf_format of this UploadObjectType.
        :rtype: List[RDFDataFormatType]
        """
        return self._rdf_format

    @rdf_format.setter
    def rdf_format(self, rdf_format: List[RDFDataFormatType]):
        """Sets the rdf_format of this UploadObjectType.

        the client applications' type of this batch of RDF data to be uploaded and validated for compliance, e.g., Turtle, RDF/XML, N-Triples, JSON-LD, RDF/JSON, TriG, N-Quads, TriX. Note that parsing JSON-LD mostly is much more time-consuming and expensive in computing than other formats. This API supports other data formats, e.g., N3, RDF/XML, and TURTLE  # noqa: E501

        :param rdf_format: The rdf_format of this UploadObjectType.
        :type rdf_format: List[RDFDataFormatType]
        """
        if rdf_format is None:
            raise ValueError("Invalid value for `rdf_format`, must not be `None`")  # noqa: E501

        self._rdf_format = rdf_format
